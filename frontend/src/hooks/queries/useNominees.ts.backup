import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase, getUserIdSync, ensureDemoUser } from '../../lib/supabase';
import { useAuth } from '../useAuth';

interface Nominee {
  id: string;
  name: string;
  relation: string;
  phone: string;
  email: string;
  allocation_percentage: number;
  is_executor: boolean;
  is_backup: boolean;
  created_at: string;
  updated_at: string;
}

interface NomineeInput {
  name: string;
  relation: string;
  phone: string;
  email: string;
  allocation_percentage: number;
  is_executor: boolean;
  is_backup: boolean;
}

export const useNominees = () => {
  const queryClient = useQueryClient();
  const { getUserId } = useAuth();
  
  // Get user ID with fallback
  const userId = getUserId() || getUserIdSync() || ensureDemoUser()?.id;

  // Fetch nominees
  const {
    data: nominees = [],
    isLoading,
    isError,
    error,
    refetch
  } = useQuery<Nominee[]>({
    queryKey: ['nominees', userId],
    queryFn: async () => {

      // Return demo data if demo user
      if (userId === "550e8400-e29b-41d4-a716-446655440000") {
        console.log("Using demo nominees data");
        return [
          {
            id: "demo-nominee-1",
            name: "John Smith",
            relation: "Son",
            phone: "+91 9876543210",
            email: "john.smith@example.com",
            allocation_percentage: 50,
            is_executor: true,
            is_backup: false,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
          {
            id: "demo-nominee-2",
            name: "Jane Smith",
            relation: "Daughter",
            phone: "+91 9876543211",
            email: "jane.smith@example.com",
            allocation_percentage: 50,
            is_executor: false,
            is_backup: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
        ];
      }
      if (!userId) {
        console.error('No user ID available for nominees query');
        throw new Error('User not authenticated');
      }

      console.log('Fetching nominees for user ID:', userId);
      const { data, error } = await supabase
        .from('nominees')
        .select('id, name, relation, phone, email, allocation_percentage, is_executor, is_backup, created_at, updated_at')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error fetching nominees:', error);
        throw error;
      }
      console.log('Nominees fetched successfully:', data);
      return data as Nominee[];
    },
    enabled: !!userId,
    staleTime: 5 * 60 * 1000,
    gcTime: 30 * 60 * 1000,
    retry: 2,
  });

  // Create nominee mutation
  const createNominee = useMutation({
    mutationFn: async (nomineeData: NomineeInput) => {
      const currentUserId = getUserId() || getUserIdSync() || ensureDemoUser()?.id;
      if (!currentUserId) {
        console.error('No user ID available for create nominee');
        throw new Error('User not authenticated');
      }

      console.log('Creating nominee for user ID:', currentUserId, 'with data:', nomineeData);

      // Handle demo mode - check if user is demo user
      if (currentUserId === "550e8400-e29b-41d4-a716-446655440000") {
        console.log("Creating demo nominee:", nomineeData);
        const newNominee = {
          id: `demo-nominee-${Date.now()}`,
          ...nomineeData,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log("Demo nominee created successfully:", newNominee);
        return newNominee;
      }
      const { data, error } = await supabase
        .from('nominees')
        .insert([{
          user_id: currentUserId,
          ...nomineeData
        }])
        .select()
        .single();

      if (error) {
        console.error('Error creating nominee:', error);
        throw error;
      }
      console.log('Nominee created successfully:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['nominees', userId] });
    },
    onError: (error) => {
      console.error('Create nominee mutation error:', error);
    },
  });

  // Update nominee mutation
  const updateNominee = useMutation({
    mutationFn: async ({ id, ...nomineeData }: { id: string } & NomineeInput) => {
      console.log('Updating nominee with ID:', id, 'with data:', nomineeData);
      const { data, error } = await supabase
        .from('nominees')
        .update(nomineeData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Error updating nominee:', error);
        throw error;
      }
      console.log('Nominee updated successfully:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['nominees', userId] });
    },
    onError: (error) => {
      console.error('Update nominee mutation error:', error);
    },
  });

  // Delete nominee mutation
  const deleteNominee = useMutation({
    mutationFn: async (id: string) => {
      console.log('Deleting nominee with ID:', id);
      const { error } = await supabase
        .from('nominees')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Error deleting nominee:', error);
        throw error;
      }
      console.log('Nominee deleted successfully');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['nominees', userId] });
    },
    onError: (error) => {
      console.error('Delete nominee mutation error:', error);
    },
  });

  return {
    nominees,
    isLoading,
    isError,
    error,
    refetch,
    createNominee,
    updateNominee,
    deleteNominee,
  };
};
