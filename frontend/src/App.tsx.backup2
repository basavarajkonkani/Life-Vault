import React, { Suspense, lazy, memo } from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { NotificationProvider } from "./contexts/NotificationContext";
import { AuthProvider, useAuth } from "./contexts/AuthContext";
import ErrorBoundary from "./components/ErrorBoundary";
import LoadingSpinner from "./components/LoadingSpinner";
import ResponsiveLayout from "./components/ResponsiveLayout";
import ProtectedRoute from "./components/ProtectedRoute";
import Login from "./pages/Login";
import "./App.css";

// Lazy load components for better performance with error boundaries
const OwnerDashboard = lazy(() => import("./pages/OwnerDashboard"));
const NomineeDashboard = lazy(() => import("./pages/NomineeDashboard"));
const AdminDashboard = lazy(() => import("./pages/AdminDashboard"));
const Assets = lazy(() => import("./pages/Assets"));
const Nominees = lazy(() => import("./pages/Nominees"));
const Vault = lazy(() => import("./pages/Vault"));
const ClaimGuides = lazy(() => import("./pages/ClaimGuides"));
const Reports = lazy(() => import("./pages/Reports"));
const Settings = lazy(() => import("./pages/Settings"));
const TradingAccounts = lazy(() => import("./pages/TradingAccounts"));

// Create a client with optimized settings for better performance
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes
      retry: 2,
      refetchOnWindowFocus: false,
      refetchOnMount: true,
      refetchOnReconnect: true,
    },
    mutations: {
      retry: 1,
    },
  },
});

// Memoized navigation items for better performance
const getNavigationItems = (userRole: string) => {
  const baseItems = [
    { path: "/", label: "Dashboard", icon: "Home" },
    { path: "/assets", label: "Assets", icon: "TrendingUp" },
    { path: "/nominees", label: "Nominees", icon: "Users" },
    { path: "/vault", label: "Vault", icon: "Lock" },
    { path: "/trading-accounts", label: "Trading Accounts", icon: "Building2" },
  ];

  const roleSpecificItems = {
    owner: [
      ...baseItems,
      { path: "/claim-guides", label: "Claim Guides", icon: "BookOpen" },
      { path: "/reports", label: "Reports", icon: "TrendingUp" },
      { path: "/settings", label: "Settings", icon: "Settings" },
    ],
    nominee: [
      { path: "/", label: "Dashboard", icon: "Home" },
      { path: "/vault", label: "Vault", icon: "Lock" },
      { path: "/claim-guides", label: "Claim Guides", icon: "BookOpen" },
    ],
    admin: [
      ...baseItems,
      { path: "/reports", label: "Reports", icon: "TrendingUp" },
      { path: "/settings", label: "Settings", icon: "Settings" },
    ],
  };

  return roleSpecificItems[userRole as keyof typeof roleSpecificItems] || baseItems;
};

// Memoized main app component
const MainApp = memo(() => {
  const { user, userProfile, loading, signOut } = useAuth();
  const navigationItems = getNavigationItems(userProfile?.role || "owner");

  // Show loading spinner while checking authentication
  if (loading) {
    return <LoadingSpinner />;
  }

  // If not authenticated, show login
  if (!user || !userProfile) {
    return <Login />;
  }

  return (
    <ResponsiveLayout user={userProfile} onLogout={signOut} navigationItems={navigationItems}>
      <Routes>
        <Route 
          path="/" 
          element={
            userProfile.role === "owner" ? <OwnerDashboard /> :
            userProfile.role === "nominee" ? <NomineeDashboard /> :
            userProfile.role === "admin" ? <AdminDashboard /> :
            <OwnerDashboard />
          } 
        />
        <Route 
          path="/assets" 
          element={
            <ProtectedRoute allowedRoles={["owner", "admin"]}>
              <Assets />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/nominees" 
          element={
            <ProtectedRoute allowedRoles={["owner", "admin"]}>
              <Nominees />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/vault" 
          element={
            <ProtectedRoute allowedRoles={["owner", "nominee", "admin"]}>
              <Vault />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/trading-accounts" 
          element={
            <ProtectedRoute allowedRoles={["owner", "admin"]}>
              <TradingAccounts />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/claim-guides" 
          element={
            <ProtectedRoute allowedRoles={["owner", "nominee", "admin"]}>
              <ClaimGuides />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/reports" 
          element={
            <ProtectedRoute allowedRoles={["owner", "admin"]}>
              <Reports />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/settings" 
          element={
            <ProtectedRoute allowedRoles={["owner", "admin"]}>
              <Settings />
            </ProtectedRoute>
          } 
        />
        <Route path="/login" element={<Login />} />
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </ResponsiveLayout>
  );
});

// Memoized app wrapper
const AppContent = memo(() => {
  return (
    <QueryClientProvider client={queryClient}>
      <NotificationProvider>
        <AuthProvider>
          <ErrorBoundary>
            <Suspense fallback={<LoadingSpinner />}>
              <MainApp />
            </Suspense>
          </ErrorBoundary>
        </AuthProvider>
      </NotificationProvider>
    </QueryClientProvider>
  );
});

// Main App component with performance optimizations
const App: React.FC = () => {
  // Clear query cache on app start for fresh data
  React.useEffect(() => {
    queryClient.clear();
  }, []);

  return (
    <Router>
      <div className="App optimize-rendering">
        <AppContent />
      </div>
    </Router>
  );
};

export default App;
